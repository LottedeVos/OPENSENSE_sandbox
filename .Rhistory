rm(list=(ls()))
url <- "https://data.4tu.nl/ndownloader/files/24056603"
temp <- tempfile()  # make temporary folder to download zip-file
download.file(url, temp, mode="wb")
AMS_dataset <- read.csv(unz(temp, "AMS_dataset.csv"))   # read AMS_dataset from downloaded zip-file
AMS_metadata <- read.csv(unz(temp, "AMS_metadata.csv"))   # read AMS_metadata from downloaded zip-file
unlink(temp)
rm(url, temp)
starttime <- strptime(AMS_dataset$Time[1], format="%Y-%m-%d %H:%M:%S", tz="GMT")
endtime <- strptime(AMS_dataset$Time[nrow(AMS_dataset)], format="%Y-%m-%d %H:%M:%S", tz="GMT")
Ndataset <- as.matrix(AMS_dataset[,-1])
save(Ndataset, file="OutputFolder/Ndataset.RData") # save 'Ndataset' as matrix in an R Object in the folder "OutputFolder"
names(AMS_metadata)[1] <- "id" # first column should be named "id" instead of "ID"
AMS_metadata[,1] <- substr(AMS_metadata[,1], 4, nchar(AMS_metadata[,1]))  # get rid of prefix "ams" in the station id's.
write.table(AMS_metadata, "InputFiles/metatableAms.txt", quote=F, row.names = F, sep=",") # save 'metadatatableAms' as txt-file in the folder "InputFiles".
rm(AMS_dataset, AMS_metadata, Ndataset)
library(geosphere) # to calculate distance bewteen lat/lon coordinates
source("InputFiles/Filtersettings.txt")	# obtain 'range', 'nstat', 'nint', 'HIthresA', 'HIthresB', 'compareint', 'rainyint', 'matchint', 'corthres' and 'Filtersettings'
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
neighbourlist <- vector("list", nrow(Meta))
for(i in 1:nrow(Meta)){
dist <- distm(cbind(Meta$lon, Meta$lat), c(Meta$lon[i], Meta$lat[i]), fun = distHaversine)	# make a list of distances to all stations including itself
neighbourlist[[i]] <- Meta$id[which(dist > 0 & dist <= range)] }	# select the ID's of stations where the distance is smaller than 'range' but larger than zero to avoid being matched with itself
neighbourlist
save(neighbourlist, file=paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))	# save 'neighbourlist' as list in an R Object
rm(dist, neighbourlist, Meta, i)
load("OutputFolder/Ndataset.RData")
load(paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
for(i in 1:nrow(Meta)){
print(paste("FZ_flags and HI_flags construction progress:", i, "out of", nrow(Meta)))
Nint <- Ndataset[,i]
if((length(which(is.na(Nint)==F)) < 1) | (length(neighbourlist[[i]]) < nstat)){	# if the 'Nint' column consist of no observations or there are too few neighbours, make a sequence of -1 values
HIflag <- FZflag <- rep(-1, times=length(Nint))
if(exists("HI_flags")==F){ HI_flags <- HIflag
}else{ HI_flags <- cbind(HI_flags, HIflag) }
if(exists("FZ_flags")==F){ FZ_flags <- FZflag
}else{ FZ_flags <- cbind(FZ_flags, FZflag) }
}else{
NeighbourVal <- Ndataset[,which(Meta$id %in% neighbourlist[[i]])]	# take a subset of 'Ndatasset' with only the columns corresponding with the ID's of the neighbouring stations
Ref <- rep(NA, times=length(Nint))
Number_of_measurements <- apply(NeighbourVal, 1, function(x) length(which(is.na(x)==F)))	# count the number of neighbours with measurements at each interval
Med <- apply(NeighbourVal, 1, median, na.rm=T)	# take the median of all neighbour values
# # # HI-filter:
HIflag <- rep(0, times=length(Nint))
HIflag[which(((Nint > HIthresB) & (Med < HIthresA)) | ((Med >= HIthresA) & (Nint > (HIthresB*Med/HIthresA))))] <- 1  # if thresholds are exceeded, the HI flag becomes 1
HIflag[which(Number_of_measurements < nstat)] <- -1	# if less than 'nstat' neighbours supply observations, the HI flag becomes equal to -1
if(exists("HI_flags")==F){ HI_flags <- HIflag
}else{ HI_flags <- cbind(HI_flags, HIflag) }
# # # FZ-filter:
Ref[which(Med == 0)] <- 0
Ref[which(Med >  0)] <- 1
Ref[which(Number_of_measurements < nstat)] <- NA	# make binary reference with 1 for rainy periods and 0 for dry periods (based on median of neighbour observations and NA when not enough info is available
Nwd <- Nint
Nwd[which(Nint > 0)] <- 1		# make binary timeseries of station observations where 1 stands for wet and 0 for dry observations
runs <- rle(Nwd)
rownr <- cumsum(runs$lengths)
endrow <- rownr[ which(runs$lengths > nint & runs$values==0) ]
startrow <- endrow - runs$lengths[ which(runs$lengths > nint  & runs$values==0) ] + 1	# 'endrow' and 'startrow' indicate the boundaries of dry periods as measured by the station
FZflag <- rep(0, times=length(Nint))
if(length(endrow) > 0){
for(r in 1:length(endrow)){
if(length( which( (Ref[startrow[r] : endrow[r]]) == 1) ) > nint ){	# in case at least 'nint' intervals in 'Ref' are wet where 'Nint' is dry
runs2 <- rle(Ref[startrow[r] : endrow[r]])	# check if the 'nint' wet intervals in 'Ref' are consecutive.
rownr2 <- cumsum(runs2$lengths)
endrow2 <- rownr2[ which(runs2$lengths > nint & runs2$values==1) ]
startrow2 <- endrow2 - runs2$lengths[ which(runs2$lengths > nint  & runs2$values==1) ] + 1
if(length(startrow2) > 0){
FZstartrow <- startrow[r] + startrow2[1] - 1 + nint	# the interval in 'Nint' where the previous 'nint' intervals were dry in 'Nint' and wet in the median
FZflag[FZstartrow : endrow[r]] <- 1	# from this interval up to the end of the dry period is flagged as Faulty Zero
m <- 1
while((is.na(Nwd[endrow[r] + m])|(Nwd[endrow[r] + m] == 0)) & ((endrow[r]+m) <= length(Nwd)) ){ # if subsequent values in 'Nwd' are NA or 0, continue flagging until 'Nwd' becomes 1 or the end of 'Nwd' is reached
FZflag[endrow[r]+m] <- 1	# once a period is labeled as Faulty Zero, flagging continues until there is a rain measurement (NA values are ignored)
m <- m+1
} # end while-loop
}} # end if loops
} # end r-loop
} # end if loop (endrow)
FZflag[which(Number_of_measurements < nstat)] <- -1	# if too few neighbours have observations the FZ can not be attributed
if(exists("FZ_flags")==F){ FZ_flags <- FZflag
}else{ FZ_flags <- cbind(FZ_flags, FZflag) }
} #end of ifelse loop
} # end of i-loop
save(FZ_flags, file=paste0("OutputFolder/FZ_flags_Filtersettings",Filtersettings,".RData"))	# save 'FZ_flags' as matrix in an R Object
save(HI_flags, file=paste0("OutputFolder/HI_flags_Filtersettings",Filtersettings,".RData"))	# save 'HI_flags' as matrix in an R Object
FZ_flags
which(FZ_flags != 0)
image(FZ_flags)
unique(FZ_flag)
unique(FZ_flags)
FZ_flags[,1]
plot(FZ_flags[,1])
uniqueFZ_flags[,1])
unique(FZ_flags[,1])
unique(FZ_flags[,2])
plot(FZ_flags[,2])
rm(FZ_flags, HI_flags, Meta, Ndataset, neighbourlist, NeighbourVal, runs, runs2, endrow, endrow2, FZflag, FZstartrow, HIflag, i, m, Med, nint, Nint, Number_of_measurements, nwd, r, Ref, rownr, rownr2, startrow, startrow2)
rm(FZ_flags, HI_flags, Meta, Ndataset, neighbourlist, NeighbourVal, runs, runs2, endrow, endrow2, FZflag, FZstartrow, HIflag, i, m, Med, nint, Nint, Number_of_measurements, Nwd, r, Ref, rownr, rownr2, startrow, startrow2)
load("OutputFolder/Ndataset.RData")
load(paste0("OutputFolder/FZ_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/HI_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
save(starttime, endtime, file="OutputFolder/timerange_AMSdata.RData")	# save starttime and endtime of dataset in an R Object
load("OutputFolder/Ndataset.RData")
load("OutputFolder/timerange_AMSdata.RData")
save(c(starttime, endtime), file="OutputFolder/timerange_AMSdata.RData")	# save starttime and endtime of dataset in an R Object
load("OutputFolder/timerange_AMSdata.RData
>?
)
)
)
)
)
")"
")
save(c(starttime, endtime), file="OutputFolder/timerange_AMSdata.RData")
starttime
endtime
save(starttime, endtime, file="OutputFolder/timerange_AMSdata.RData")	# save starttime and endtime of dataset in an R Object
load("PWSQC Rnotebook/OutputFolder/timerange_AMSdata.RData")
rm(endtime)
load("PWSQC Rnotebook/OutputFolder/timerange_AMSdata.RData")
rm(list=(ls()))
library(geosphere) # to calculate distance bewteen lat/lon coordinates
source("InputFiles/Filtersettings.txt")	# obtain 'range', 'nstat', 'nint', 'HIthresA', 'HIthresB', 'compareint', 'rainyint', 'matchint', 'corthres' and 'Filtersettings'
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
neighbourlist <- vector("list", nrow(Meta))
for(i in 1:nrow(Meta)){
dist <- distm(cbind(Meta$lon, Meta$lat), c(Meta$lon[i], Meta$lat[i]), fun = distHaversine)	# make a list of distances to all stations including itself
neighbourlist[[i]] <- Meta$id[which(dist > 0 & dist <= range)] }	# select the ID's of stations where the distance is smaller than 'range' but larger than zero to avoid being matched with itself
save(neighbourlist, file=paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))	# save 'neighbourlist' as list in an R Object
rm(list=(ls()))
load("OutputFolder/Ndataset.RData")
load(paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))
source("InputFiles/Filtersettings.txt")	# obtain 'range', 'nstat', 'nint', 'HIthresA', 'HIthresB', 'compareint', 'rainyint', 'matchint', 'corthres' and 'Filtersettings'
load("OutputFolder/Ndataset.RData")
load(paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
rm(list=(ls()))
source("InputFiles/Filtersettings.txt")	# obtain 'range', 'nstat', 'nint', 'HIthresA', 'HIthresB', 'compareint', 'rainyint', 'matchint', 'corthres' and 'Filtersettings'
load("OutputFolder/Ndataset.RData")
load(paste0("OutputFolder/FZ_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/HI_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
Ndataset2 <- Ndataset * defaultbiascorrection	# the multiplicationfactor does not impact SO in any way
Ndataset2[which((HI_flags == 1)|(FZ_flags == 1))] <- NA
rm(Ndataset) # delete Nmatrix from working memory can speed code up for large datasets.
for(i in 1:nrow(Meta)){
Nint <- Ndataset2[,i]
if((length(neighbourlist[[i]]) < nstat)|(length(which(is.na(Nint)==F)) < 1)){SOflag <- rep(-1, times=length(Nint))	# if there are not enough stations nearby or no observations in 'Nint', all intervals get flagged as -1
}else{
Nintrain <- rep(0, length=length(Nint))
Nintrain[which(Nint > 0)] <- 1
Nintraincum <- cumsum(Nintrain)	# cumulative intervals with nonzero rainmeasurements
comparestartrowA <- match((Nintraincum-rainyint+1), Nintraincum)-1	# row from which the window should start to have at least 'rainyint' rainy intervals. match the first value that belongs to a number of rainy intervals equal to 'rainyint'-1 (double minus becomes +), and detract 1 after. This makes sure that if multiple rows have same amount, the last one (nearest to matching interval) is chosen. Note that this may result in a rownumber of 0 (1 minus 1), which should be replaced by NA (see next line), as the 0th row does not exist.
comparestartrowA[which(comparestartrowA == 0)] <- NA
comparestartrowB <- c(rep(NA, times=compareint-1), 1:(length(Nint)-compareint+1))	# row from which the window should start to have 'compareint' number of intervals
comparestartrow <- ifelse(is.na(comparestartrowB), NA, ifelse((comparestartrowA < comparestartrowB), comparestartrowA, comparestartrowB))	# choose either 'compareint' steps before, or where 'rainyint' was reached
NeighbourVal <- Ndataset2[,which(Meta$id %in% neighbourlist[[i]])]
NeighbourVal[which(is.na(Nint)),] <- NA		# replace rows where 'Nint' is NA with NA, this is needed for checking 'matchint' later
cortable <- biastable <-  matrix(NA, ncol=ncol(NeighbourVal), nrow=nrow(NeighbourVal)) # table of size 'NeighbourVal' to fill in the correlation values
for(t in 1:length(Nint)){
print(paste("SO filter: station", i, "out of", nrow(Meta), " -  t",t, "out of", length(Nint)))
if(is.na(comparestartrow[t])){next}
NeighbourValselec <- NeighbourVal[comparestartrow[t]:t,]
columnselec <- which(apply(NeighbourValselec, 2, function(x) length(which(is.na(x)==F))) > matchint)	# find columns that have at least 'matchint' overlapping intervals
if(length(columnselec) < nstat){next}
cortable[t,columnselec] <- apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs')) # determine the correlations with all neighbour stations over the past period that was chosen, this can yield a NA when the comparing stations measures zeroes only
biastable[t,columnselec] <- apply(NeighbourValselec[,columnselec], 2, function(x) mean(Nint[comparestartrow[t]:t]/defaultbiascorrection - x, na.rm=T)/mean(x, na.rm=T) ) # calculate the relative bias in the mean of the raw observations with all biascorrected neighbour stations over the past period between 'comparestartrow[t]' and 't'. To do so, 'Nint', which is based on 'Ndataset' times 'defaultbiascorrection', should be divided by 'defaultbiascorrection'.
} # end of r-loop
SOflag <- rep(0, times=length(Nint))
SOflag[which(apply(cortable, 1, function(x) median(x, na.rm=T)) < corthres)] <- 1	# rows where the median of all neighbour correlations was below 'corthres' are flagged as Station Outlier
SOflag[which(apply(cortable, 1, function(x) length(which(is.na(x)==F))) < nstat)] <- -1	# 'cortable' will have more or equal amounts of NA values than 'biastable'. Where 'SOflag' is 0, enough stations were included in the calculation to consider that row in 'biastable'.
} # end of ifelse loop
if(exists("SO_flags")==F){ SO_flags <- SOflag
}else{ SO_flags <- cbind(SO_flags, SOflag) }
biascorrectiontimeline <- rep(defaultbiascorrection, times=length(Nint)) # start out with the 'defaultbiascorrection' for all stations at all time intervals
if(length(which(SOflag == 0)) > 0){
biasmed <- apply(biastable, 1, function(x) median(x, na.rm=T))	# the median of the bias between raw timeserie 'Nint' with neighbouring stations that are multiplied with the 'defaultbiascorrection'
for(brow in which(SOflag == 0)){
biasprev <- biascorrectiontimeline[brow]
biasnew <- 1 / (1+biasmed[brow])
if( abs(log(biasnew / biasprev)) > log(1+biasthres) ){	# means that if [1/(1+biasthres) > BCFnew/BCFprev > 1+biasthres], change it for the remainder of the timeline
biascorrectiontimeline[(brow+1):length(biascorrectiontimeline)] <- biasnew }
} # end of brow-loop
} # end of if-loop
if(exists("biascorrectiontable")==F){ biascorrectiontable <- biascorrectiontimeline
}else{ biascorrectiontable <- cbind(biascorrectiontable, biascorrectiontimeline) }
} # end of i loop
rm(list=(ls()))
source("InputFiles/Filtersettings.txt")	# obtain 'range', 'nstat', 'nint', 'HIthresA', 'HIthresB', 'compareint', 'rainyint', 'matchint', 'corthres' and 'Filtersettings'
load("OutputFolder/Ndataset.RData")
load(paste0("OutputFolder/FZ_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/HI_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
Ndataset2 <- Ndataset * defaultbiascorrection	# the multiplicationfactor does not impact SO in any way
#Ndataset2[which((HI_flags == 1)|(FZ_flags == 1))] <- NA
rm(Ndataset) # delete Nmatrix from working memory can speed code up for large datasets.
for(i in 1:nrow(Meta)){
Nint <- Ndataset2[,i]
if((length(neighbourlist[[i]]) < nstat)|(length(which(is.na(Nint)==F)) < 1)){SOflag <- rep(-1, times=length(Nint))	# if there are not enough stations nearby or no observations in 'Nint', all intervals get flagged as -1
}else{
Nintrain <- rep(0, length=length(Nint))
Nintrain[which(Nint > 0)] <- 1
Nintraincum <- cumsum(Nintrain)	# cumulative intervals with nonzero rainmeasurements
comparestartrowA <- match((Nintraincum-rainyint+1), Nintraincum)-1	# row from which the window should start to have at least 'rainyint' rainy intervals. match the first value that belongs to a number of rainy intervals equal to 'rainyint'-1 (double minus becomes +), and detract 1 after. This makes sure that if multiple rows have same amount, the last one (nearest to matching interval) is chosen. Note that this may result in a rownumber of 0 (1 minus 1), which should be replaced by NA (see next line), as the 0th row does not exist.
comparestartrowA[which(comparestartrowA == 0)] <- NA
comparestartrowB <- c(rep(NA, times=compareint-1), 1:(length(Nint)-compareint+1))	# row from which the window should start to have 'compareint' number of intervals
comparestartrow <- ifelse(is.na(comparestartrowB), NA, ifelse((comparestartrowA < comparestartrowB), comparestartrowA, comparestartrowB))	# choose either 'compareint' steps before, or where 'rainyint' was reached
NeighbourVal <- Ndataset2[,which(Meta$id %in% neighbourlist[[i]])]
NeighbourVal[which(is.na(Nint)),] <- NA		# replace rows where 'Nint' is NA with NA, this is needed for checking 'matchint' later
cortable <- biastable <-  matrix(NA, ncol=ncol(NeighbourVal), nrow=nrow(NeighbourVal)) # table of size 'NeighbourVal' to fill in the correlation values
for(t in 1:length(Nint)){
print(paste("SO filter: station", i, "out of", nrow(Meta), " -  t",t, "out of", length(Nint)))
if(is.na(comparestartrow[t])){next}
NeighbourValselec <- NeighbourVal[comparestartrow[t]:t,]
columnselec <- which(apply(NeighbourValselec, 2, function(x) length(which(is.na(x)==F))) > matchint)	# find columns that have at least 'matchint' overlapping intervals
if(length(columnselec) < nstat){next}
cortable[t,columnselec] <- apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs')) # determine the correlations with all neighbour stations over the past period that was chosen, this can yield a NA when the comparing stations measures zeroes only
biastable[t,columnselec] <- apply(NeighbourValselec[,columnselec], 2, function(x) mean(Nint[comparestartrow[t]:t]/defaultbiascorrection - x, na.rm=T)/mean(x, na.rm=T) ) # calculate the relative bias in the mean of the raw observations with all biascorrected neighbour stations over the past period between 'comparestartrow[t]' and 't'. To do so, 'Nint', which is based on 'Ndataset' times 'defaultbiascorrection', should be divided by 'defaultbiascorrection'.
} # end of r-loop
SOflag <- rep(0, times=length(Nint))
SOflag[which(apply(cortable, 1, function(x) median(x, na.rm=T)) < corthres)] <- 1	# rows where the median of all neighbour correlations was below 'corthres' are flagged as Station Outlier
SOflag[which(apply(cortable, 1, function(x) length(which(is.na(x)==F))) < nstat)] <- -1	# 'cortable' will have more or equal amounts of NA values than 'biastable'. Where 'SOflag' is 0, enough stations were included in the calculation to consider that row in 'biastable'.
} # end of ifelse loop
if(exists("SO_flags")==F){ SO_flags <- SOflag
}else{ SO_flags <- cbind(SO_flags, SOflag) }
biascorrectiontimeline <- rep(defaultbiascorrection, times=length(Nint)) # start out with the 'defaultbiascorrection' for all stations at all time intervals
if(length(which(SOflag == 0)) > 0){
biasmed <- apply(biastable, 1, function(x) median(x, na.rm=T))	# the median of the bias between raw timeserie 'Nint' with neighbouring stations that are multiplied with the 'defaultbiascorrection'
for(brow in which(SOflag == 0)){
biasprev <- biascorrectiontimeline[brow]
biasnew <- 1 / (1+biasmed[brow])
if( abs(log(biasnew / biasprev)) > log(1+biasthres) ){	# means that if [1/(1+biasthres) > BCFnew/BCFprev > 1+biasthres], change it for the remainder of the timeline
biascorrectiontimeline[(brow+1):length(biascorrectiontimeline)] <- biasnew }
} # end of brow-loop
} # end of if-loop
if(exists("biascorrectiontable")==F){ biascorrectiontable <- biascorrectiontimeline
}else{ biascorrectiontable <- cbind(biascorrectiontable, biascorrectiontimeline) }
} # end of i loop
cortable
NeighbourVal
NeighbourValselec
length(columnselec) < nstat
cortable
cortable[t, columnselec]
apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs'))
class(apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs')))
length(apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs')))
length(columnselec)
length(apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs')))
apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs'))
apply(NeighbourValselec[,columnselec[-4]], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs'))
apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs'))
cortable[t,columnselec]
cortable[t,columnselec] <- apply(NeighbourValselec[,columnselec], 2, function(x) cor(x, Nint[comparestartrow[t]:t], use='complete.obs'))
cortable[t,columnselec]
apply(NeighbourValselec[,columnselec], 2, function(x) mean(Nint[comparestartrow[t]:t]/defaultbiascorrection - x, na.rm=T)/mean(x, na.rm=T) )
rm(list=(ls()))
url <- "https://data.4tu.nl/ndownloader/files/24056603"
temp <- tempfile()  # make temporary folder to download zip-file
download.file(url, temp, mode="wb")
AMS_dataset <- read.csv(unz(temp, "AMS_dataset.csv"))   # read AMS_dataset from downloaded zip-file
AMS_metadata <- read.csv(unz(temp, "AMS_metadata.csv"))   # read AMS_metadata from downloaded zip-file
unlink(temp)
rm(url, temp)
rm(list=(ls()))
source("InputFiles/Filtersettings.txt")	# obtain 'range', 'nstat', 'nint', 'HIthresA', 'HIthresB', 'compareint', 'rainyint', 'matchint', 'corthres' and 'Filtersettings'
load("OutputFolder/timerange_AMSdata.RData")
load("OutputFolder/Ndataset.RData")
load(paste0("OutputFolder/FZ_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/HI_flags_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/neighbourlist_Filtersettings",Filtersettings,".RData"))
load(paste0("OutputFolder/SO_flags_Filtersettings",Filtersettings,".RData"))
Meta <- read.table("InputFiles/metatableAms.txt", header=T, sep=",")
Time <- seq(starttime, endtime, by= "5 min")
Time
# example: #
StationSelec <- c(1, 30, 44, 100, 120, 134)
Nselec <- Ndataset[,StationSelec]
Nselec <- Ndataset[,StationSelec]
NselecAccum <- apply(Nselec, 1, function(x) cumsum(ifelse(is.na(raincolumn), 0, raincolumn)) + raincolumn*0)	# count the number of neighbours with measurements at each interval
NselecAccum <- apply(Nselec, 1, function(x) cumsum(ifelse(is.na(x), 0, x)) + x*0)	# count the number of neighbours with measurements at each interval
NselecAccum
dim(NselecAccum)
NselecAccum[,1]
NselecAccum[1,]
plot(NselecAccum[1,])
NselecAccum <- apply(Nselec, 1, function(x) cumsum(ifelse(is.na(x), 0, x)) + x*0)	# count the number of neighbours with measurements at each interval
plot(NselecAccum[1,])
s <- 1
s <- 2
StationSelec[s]
N_ac <-  cumsum(ifelse(is.na(Ndataset[,StationSelec[s]]), 0, Ndataset[,StationSelec[s]])) + Ndataset[,StationSelec[s]]*0
plot(N_ac)
s
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
ymax <- 1600 # mm upper limit of the graph
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
N_ac
points(Time, N_ac, col=rainbow(length(StationSelec))[s])
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
s
rainbow(length(StationSelec))[s]
points(Time, N_ac, col=rainbow(length(StationSelec))[s])
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
lines(Time, N_ac, col=rainbow(length(StationSelec))[s])
dev.new()
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
lines(Time, N_ac, col=rainbow(length(StationSelec))[s])
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
points(Time[100], 500)
graphics.off()
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
lines(Time, N_ac, col=rainbow(length(StationSelec))[s])
dev.off()
dev.off()
dev.off()
graphics.off()
dev.off()
dev.new()
plot(Time, rep(NA, times=length(Time)), ylim=c(0,ymax), ylab="Cummulative rainfall (mm)")
lines(Time, N_ac, col=rainbow(length(StationSelec))[s])
